# prediction on test dataset using Lasso (without SGD, without PCA),Random Forest (without SGD, without PCA) 
# and Gradient Boosting (without SGD, without PCA)

import copy 
import math
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import norm
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from scipy import stats
from scipy.stats import pearsonr
import warnings
import scipy.stats as stats
import pylab 
from sklearn.model_selection import cross_validate
from sklearn.model_selection import GridSearchCV
warnings.filterwarnings('ignore')
%matplotlib inline

# train data
df_train = pd.read_csv('/Users/amanprasad/Documents/Kaggle/House Prices/House_File_V2/df_train_ALL_FeatEngg_8.csv')
df_train_1=copy.deepcopy(df_train)

# test data
df_test = pd.read_csv('/Users/amanprasad/Documents/Kaggle/House Prices/House_File_V2/df_test_FeatEngg_9_V2.csv')
df_test_1=copy.deepcopy(df_test)

#-------------------------------------------------------------------------------------------------------------------------------------------
# data preparation

Y_train=df_train_1['SalePrice']
df_train_1.drop('SalePrice',axis=1,inplace=True)
X_train=df_train_1

X_test=df_test_1

def display_scores(scores):
    print("Scores RMSE:", scores)
    print("Mean RMSE:", scores.mean())
    print("Standard deviation of RMSE:", scores.std())


#-------------------------------------------------------------------------------------------------------------------------------------------
# Lasso Regression
from sklearn.linear_model import Lasso

lasso = Lasso(alpha=0.0008)
scores = cross_validate(lasso, X_train, Y_train, cv=3,scoring=('r2', 'neg_mean_squared_error'),return_train_score=True)

s=scores['test_neg_mean_squared_error']
r=scores['test_r2'].sum()/3
r
# 0.9131003324346484
lasso_train_rmse=np.sqrt(-(s.sum())/3)
lasso_train_rmse
#0.11768823954256433

# prediction
lasso_reg = Lasso(alpha=0.0008)
lasso_reg.fit(X_train, Y_train)

prediction_lasso=lasso_reg.predict(X_test)

prediction_lasso=pd.DataFrame(prediction_lasso,columns=['Lasso_Prediction'])

prediction_lasso['Lasso_Prediction']=np.exp(prediction_lasso['Lasso_Prediction'])

#-----------------------------------------------------------------------------
# exporting the predicted results generated by Lasso
prediction_lasso.to_csv(r'/Users/amanprasad/Documents/Kaggle/House Prices/Lasso_Prediction.csv', index = True)


#-------------------------------------------------------------------------------------------------------------------------------------------
# Random Forest
from sklearn.ensemble import RandomForestRegressor

randomForest=RandomForestRegressor(bootstrap=True,max_depth=77,max_features=50,min_samples_leaf=1,min_samples_split=3,n_estimators=500)
scores=cross_validate(randomForest, X_train, Y_train, cv=5,scoring=('r2', 'neg_mean_squared_error'),return_train_score=True)
s=scores['test_neg_mean_squared_error']
r=scores['test_r2'].sum()/5
r
# 0.8931771114146656
randomForest_train_rmse=np.sqrt(-(s.sum())/5)
randomForest_train_rmse
# 0.1303869736350782

# Prediction
ranfomForest_reg = RandomForestRegressor(bootstrap=True,max_depth=77,max_features=50,min_samples_leaf=1,min_samples_split=3,n_estimators=500)
ranfomForest_reg.fit(X_train, Y_train)

prediction_randomForest=ranfomForest_reg.predict(X_test)

prediction_randomForest=pd.DataFrame(prediction_randomForest,columns=['RandomForest_Prediction'])

prediction_randomForest['RandomForest_Prediction']=np.exp(prediction_randomForest['RandomForest_Prediction'])


#-----------------------------------------------------------------------------
# exporting the predicted results generated by Random Forest
prediction_randomForest.to_csv(r'/Users/amanprasad/Documents/Kaggle/House Prices/RandomForest_Prediction.csv', index = True)


#-------------------------------------------------------------------------------------------------------------------------------------------
# Gradient Boosting
from sklearn.ensemble import GradientBoostingRegressor

gradBoost_reg = GradientBoostingRegressor(max_depth=60,max_features=20,min_samples_leaf=4,min_samples_split=4,n_estimators=600,learning_rate= 0.01)
scores=cross_validate(randomForest, X_train, Y_train, cv=5,scoring=('r2', 'neg_mean_squared_error'),return_train_score=True)
s=scores['test_neg_mean_squared_error']
r=scores['test_r2'].sum()/5
r
# 0.8932770861080661
gradBoost_train_rmse=np.sqrt(-(s.sum())/5)
gradBoost_train_rmse
# 0.1302910819584653


# Prediction
gradBoost_reg = GradientBoostingRegressor(max_depth=60,max_features=20,min_samples_leaf=4,min_samples_split=4,n_estimators=600,learning_rate= 0.01)
gradBoost_reg.fit(X_train, Y_train)

prediction_gradBoost=gradBoost_reg.predict(X_test)

prediction_gradBoost=pd.DataFrame(prediction_gradBoost,columns=['GradientBoost_Prediction'])

prediction_gradBoost['GradientBoost_Prediction']=np.exp(prediction_gradBoost['GradientBoost_Prediction'])


#-----------------------------------------------------------------------------
# exporting the predicted results generated by Gradient Boost
prediction_gradBoost.to_csv(r'/Users/amanprasad/Documents/Kaggle/House Prices/GradientBoost_Prediction.csv', index = True)

#-----------------------------------------------------------------------------
# combining all the predictions to one dataframe
df_prediction=pd.concat([prediction_lasso,prediction_randomForest,prediction_gradBoost],axis=1)

# exporitng df_prediction
df_prediction.to_csv(r'/Users/amanprasad/Documents/Kaggle/House Prices/Prediction_Lasso_RF_GradBoost.csv', index = True)


